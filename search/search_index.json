{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Tags Documentation","text":"<p>A library that helps you build tags functionality around your existing models in the CodeIgniter 4 framework.</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Basic usage</li> </ul>"},{"location":"basic_usage/","title":"Basic usage","text":"<ul> <li>Working with model<ul> <li>Adding tags</li> <li>Modifying tags</li> <li>Removing tags</li> <li>Results with tags</li> <li>Results with certain tags only</li> <li>Results with any tags</li> <li>Displaying tags</li> </ul> </li> <li>Working with Entity</li> <li>TagModel</li> <li>Tags searching (for autocomplete)</li> <li>Tags by types</li> <li>Helper functions</li> </ul>"},{"location":"basic_usage/#working-with-model","title":"Working with model","text":"<p>This is how basic usage look like. It's designed to easily integrate with usual form request workflow.</p> <p>Warning</p> <p>Be sure to validate your tags before saving them. You should validate things like: maximum lenght, allowed characters etc. The maximum length of a single tag is 32 characters.</p> <p>Note</p> <p>Very nice library that can help you managing tags on a frontend is tagify. Remember that validating tags on the frontend is not enought - you need backend validation too.</p> <p>Note</p> <p>Your model/table should not use the <code>tags</code> field name, as it is used exclusively by this library. Please treat the <code>tags</code> field name as reserved.</p>"},{"location":"basic_usage/#adding-tags","title":"Adding tags","text":"<p>Adding tags with normal request flow is very easy.</p> <pre><code>model(ImageModel::class)-&gt;insert([\n    'name'   =&gt; 'sampleFile.jpeg',\n    'width'  =&gt; 100,\n    'height' =&gt; 100,\n    // this is our field with tags\n    // we can also set it as an array: ['tag1', 'tag2', 'tag3']\n    'tags'   =&gt; 'tag1,tag2,tag3',\n]);</code></pre>"},{"location":"basic_usage/#modifying-tags","title":"Modifying tags","text":"<p>Modifying tags with normal request flow is very easy.</p> <pre><code>model(ImageModel::class)-&gt;save([\n    'id'   =&gt; 1,\n    // this is our field with tags\n    // we can also set it as an array: ['tag1', 'tag2']\n    'tags' =&gt; 'tag1,tag2',\n]);</code></pre>"},{"location":"basic_usage/#removing-tags","title":"Removing tags","text":"<p>Removing tags with normal request flow is very easy.</p> <pre><code>model(ImageModel::class)-&gt;save([\n    'id'   =&gt; 1,\n    // this is our field with tags\n    // we can also set it as an array: []\n    'tags' =&gt; '',\n]);</code></pre>"},{"location":"basic_usage/#results-with-tags","title":"Results with tags","text":"<p>You can retrieve the results, which will include tags, using the <code>withTags()</code> method, it works with all other methods from the CodeIgniter Model.</p> <pre><code>model(ImageModel::class)-&gt;withTags()-&gt;find(1);\n// or\nmodel(ImageModel::class)-&gt;withTags()-&gt;findAll();</code></pre>"},{"location":"basic_usage/#results-with-all-tags","title":"Results with all tags","text":"<p>This will return a result with images that have both tags assigned.</p> <pre><code>model(ImageModel::class)-&gt;withAllTags(['tag1', 'tag2'])-&gt;findAll();</code></pre>"},{"location":"basic_usage/#results-with-any-tags","title":"Results with any tags","text":"<p>This will return a result with images that have any of these tags assigned.</p> <pre><code>model(ImageModel::class)-&gt;withAnyTags(['tag1', 'tag2'])-&gt;findAll();</code></pre>"},{"location":"basic_usage/#displaying-tags","title":"Displaying tags","text":"<p>When we get the tags in a result, they are available as a Collection class. For this reason, tag iteration is specific:</p> <pre><code>$image = model(ImageModel::class)-&gt;withTags()-&gt;find(1);\n// tags are available as a Collection\nforeach ($image-&gt;tags-&gt;items() as $tag) {\n    d($tag-&gt;name, $tag-&gt;slug);\n}</code></pre>"},{"location":"basic_usage/#working-with-entity","title":"Working with Entity","text":"<p>Using <code>TaggableEntity</code> trait in our entity gives us some nice features if we want to work directly on a <code>tags</code> field.</p> <pre><code>$model = model(ImageModel::class);\n$image = $model-&gt;find(1);\n// set tags\n$image-&gt;tags = ['tag1', 'tag2']\n// add a new tag\n$image-&gt;addTags(['tag3']);\n// remove tag\n$image-&gt;removeTags(['tag2']);\n// save changes with tags: tag1 and tag3\n$model-&gt;save($image);</code></pre>"},{"location":"basic_usage/#tagmodel","title":"TagModel","text":"<p>Some useful methods that you can find in the <code>TagModel</code> class.</p>"},{"location":"basic_usage/#tags-searching-for-autocomplete","title":"Tags searching (for autocomplete)","text":"<p>If you're building an autocomplete functionality when user is typing, then you can use <code>search</code> method.</p> <p>Let's say we have two tables: <code>foods</code> and <code>countries</code>. And our tags are: <code>Carrot</code>, <code>Potato</code>, <code>Portugal</code> and <code>Italy</code>.</p> <p>The code below will return tags: <code>Potato</code> and <code>Portugal</code>.</p> <pre><code>model(TagModel::class)-&gt;search('po');</code></pre> <p>But this code will return only tag: <code>Portugal</code>.</p> <pre><code>model(TagModel::class)-&gt;search('po', 'countries');</code></pre> <p>We can also change the number of results we're returning and the page number:</p> <pre><code>$perPage = 5;\n$page    = 0;\nmodel(TagModel::class)-&gt;search('po', null, $perPage, $page);</code></pre>"},{"location":"basic_usage/#tags-by-types","title":"Tags by types","text":"<p>We can grab tags based on model (table) they were used with.</p> <pre><code>model(TagModel::class)-&gt;findByTypes(['images', 'news']);</code></pre> <p>This will return all the tags that were used with <code>images</code> and <code>news</code> models (tables).</p>"},{"location":"basic_usage/#helper-functions","title":"Helper functions","text":"<p>All helper functions are available without requiring additional helper.</p>"},{"location":"basic_usage/#convert_to_tags","title":"convert_to_tags()","text":"<p>This function is useful, especially if you do not use entity classes, and when you want to manipulate tags manually, before writing to the database.</p> <p>Here is an example that shows how to add a new tag to the existing ones:</p> <pre><code>$model = model(ImageModel::class);\n$image = $model-&gt;withTags()-&gt;find(1);\n// instead of writing code like this:\n$image-&gt;tags-&gt;push(new Tag(['name' =&gt; 'second tag']));\n// we can simplify it to this:\n$image-&gt;tags-&gt;push(convert_to_tags('second tag'));</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Model</li> <li>Entity</li> <li>Config</li> </ul>"},{"location":"configuration/#model","title":"Model","text":"<p>All we need to do is add <code>HasTags</code> trait to our model and initialize tags with <code>initTags()</code> method.</p> <p>Note</p> <p>You don't need to modify <code>$allowedFields</code> array (if you use it) or your existing database schema.</p> <pre><code>// app/Models/ImageModel.php\n&lt;?php\n\n// ...\n\nuse CodeIgniter\\Model;\nuse Michalsn\\CodeIgniterTags\\Traits\\HasTags;\n\nclass ImageModel extends Model\n{\n    use HasTags;\n\n    // ...\n\n    // Values below are only an example for ImageModel table fields\n    protected $allowedFields = ['name', 'width', 'height'];\n\n    // ...\n\n    protected function initialize()\n    {\n        $this-&gt;initTags();\n    }\n\n    // ...\n\n}</code></pre>"},{"location":"configuration/#entity","title":"Entity","text":"<p>If your model return type is an <code>Entity</code>, then you can also add <code>TaggableEntity</code> trait to it. It will help you with making changes related to the tags when working directly with the entity.</p> <pre><code>// app/Entities/Image.php\n&lt;?php\n\n// ...\n\nuse CodeIgniter\\Entity\\Entity;\nuse Michalsn\\CodeIgniterTags\\Traits\\TaggableEntity;\n\nclass Image extends Entity\n{\n    use TaggableEntity;\n\n    // ...\n}</code></pre>"},{"location":"configuration/#config","title":"Config","text":"<p>We can publish configuration file into our app namespace via command:</p> <pre><code>php spark tags:publish</code></pre> <p>Note</p> <p>This is not mandatory. You should publish a config file only if you want to change the default values.</p> <p>The configuration file gives us control over some of the library's features.</p>"},{"location":"configuration/#cleanupunusedtags","title":"$cleanupUnusedTags","text":"<p>This gives us control over how unused tags are treated. If we set <code>true</code>, we will remove all unused tags. The action to remove unused tags is triggered whenever we update an entry that uses tags. By default, this is set to <code>true</code>.</p>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> <li>Database migration</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require michalsn/codeigniter-tags</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/tags</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>Michalsn\\CodeIgniterTags</code> namespace to the <code>$psr4</code> array. You also have to add <code>Common.php</code> to the <code>$files</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'Michalsn\\CodeIgniterTags' =&gt; APPPATH . 'ThirdParty/tags/src',\n];\n\n// ...\n\npublic $files = [\n    APPPATH . 'ThirdParty/tags/src/Common.php',\n];</code></pre>"},{"location":"installation/#database-migration","title":"Database migration","text":"<p>Regardless of which installation method you chose, we also need to migrate the database to add new tables.</p> <p>You can do this with the following command:</p> <pre><code>php spark migrate --all</code></pre>"}]}